{"version":3,"file":"CQueryDescriptor.js","sourceRoot":"","sources":["CQueryDescriptor.ts"],"names":[],"mappings":"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","sourcesContent":["\r\n    import {IModel} from \"./IModel\";\r\n\r\n    export class CQueryDescriptor {\r\n        $type: string;\r\n        IncludeParameters: MemberNode[];\r\n        IsMapped: boolean;\r\n        Root: LNode;\r\n        QueryType:QueryType;\r\n\r\n        constructor(entryPoint: IModel) {\r\n            this\r\n                .$type =\r\n                \"Covis.Data.DynamicLinq.CQuery.Contracts.QueryDescriptor, Covis.Data.DynamicLinq.CQuery.Contracts\";\r\n            this.Root = new EntryPointNode(entryPoint.type);\r\n            \r\n            this.IncludeParameters = [];\r\n            this.IsMapped = false;\r\n            this.QueryType = QueryType.Default;\r\n        }\r\n    }\r\n\r\n    export class INode {\r\n        $type: string;\r\n\r\n        constructor() {\r\n            this.$type = \"Covis.Data.DynamicLinq.CQuery.Contracts.Model.INode, Covis.Data.DynamicLinq.CQuery.Contracts\";\r\n        }\r\n    }\r\n\r\n    export class LNode extends INode {\r\n        $type: string;\r\n        Left: LNode;\r\n\r\n        constructor() {\r\n            super();\r\n            this.$type = \"Covis.Data.DynamicLinq.CQuery.Contracts.Model.LNode, Covis.Data.DynamicLinq.CQuery.Contracts\";\r\n        }\r\n\r\n    }\r\n\r\n\r\n    export class MemberNode extends LNode {\r\n        $type: string;\r\n        Member: string;\r\n\r\n        constructor(member: string) {\r\n            super();\r\n            this\r\n                .$type =\r\n                \"Covis.Data.DynamicLinq.CQuery.Contracts.Model.MemberNode, Covis.Data.DynamicLinq.CQuery.Contracts\";\r\n            this.Member = member;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    export class EntryPointNode extends LNode {\r\n        $type: string;\r\n        EntryPointType:string;\r\n        constructor(type:string) {\r\n            super();\r\n            this.EntryPointType = type;\r\n            this\r\n                .$type =\r\n                \"Covis.Data.DynamicLinq.CQuery.Contracts.Model.EntryPointNode, Covis.Data.DynamicLinq.CQuery.Contracts\";\r\n        }\r\n    }\r\n\r\n    export class BNode extends LNode {\r\n        $type: string;\r\n        Right: INode;\r\n\r\n        constructor() {\r\n            super();\r\n            this.$type = \"Covis.Data.DynamicLinq.CQuery.Contracts.Model.BNode, Covis.Data.DynamicLinq.CQuery.Contracts\";\r\n        }\r\n    }\r\n\r\n    export class CallNode extends BNode {\r\n        $type: string;\r\n        Method: string;\r\n\r\n        constructor(method: string) {\r\n            super();\r\n            this\r\n                .$type =\r\n                \"Covis.Data.DynamicLinq.CQuery.Contracts.Model.CallNode, Covis.Data.DynamicLinq.CQuery.Contracts\";\r\n            this.Method = method;\r\n        }\r\n    }\r\n\r\n    export class ConstantNode extends INode {\r\n        $type: string;\r\n        Value: any;\r\n\r\n        constructor(value: any) {\r\n            super();\r\n            this\r\n                .$type =\r\n                \"Covis.Data.DynamicLinq.CQuery.Contracts.Model.ConstantNode, Covis.Data.DynamicLinq.CQuery.Contracts\";\r\n            this.Value = value;\r\n        }\r\n    }\r\n\r\n    export class ProjectorNode extends LNode {\r\n        $type: string;\r\n        Bindings: any;\r\n\r\n        constructor() {\r\n            super();\r\n            this\r\n                .$type =\r\n                \"Covis.Data.DynamicLinq.CQuery.Contracts.Model.ProjectorNode, Covis.Data.DynamicLinq.CQuery.Contracts\";\r\n            this.Bindings = [];\r\n        }\r\n    }\r\n\r\n    export class BinaryNode extends BNode {\r\n        $type: string;\r\n        BinaryOperator: BinaryOperator | CompareOperator;\r\n\r\n        constructor(binaryOperator: BinaryOperator | CompareOperator) {\r\n            super();\r\n            this\r\n                .$type =\r\n                \"Covis.Data.DynamicLinq.CQuery.Contracts.Model.BinaryNode, Covis.Data.DynamicLinq.CQuery.Contracts\";\r\n            this.BinaryOperator = binaryOperator;\r\n        }\r\n    }\r\n\r\n   \r\n    export enum BinaryOperator {\r\n        And = 0,\r\n        AndAlso = 1,\r\n        Or = 2,\r\n        OrElse = 3\r\n    }\r\n\r\n    export enum CompareOperator {\r\n        Equal = 4,\r\n        GreaterThan = 5,\r\n        GreaterThanOrEqual = 6,\r\n        LessThan = 7,\r\n        LessThanOrEqual = 8\r\n    }\r\n\r\n    export enum StringMethods {\r\n        Contains = 9,\r\n        StartsWith = 10,\r\n        EndsWith = 11\r\n    }\r\n\r\n    export enum Methods {\r\n        Any = 12,\r\n        In = 13\r\n    }\r\n\r\n    export enum QueryType {\r\n        Default = 0,\r\n        ModelProjection = 1,\r\n        AnonymeProjection = 2\r\n    }\r\n\r\n"]}