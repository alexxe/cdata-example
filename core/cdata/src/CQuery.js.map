{"version":3,"file":"CQuery.js","sourceRoot":"","sources":["CQuery.ts"],"names":[],"mappings":"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","sourcesContent":["\r\n\r\nimport {IModel} from \"./../index\";\r\nimport  * as Descriptor from \"./CQueryDescriptor\";\r\nimport {Methods} from \"./CQueryDescriptor\";\r\n\r\nexport class Projector<T extends IModel> {\r\n    projections: Array<Binding>;\r\n    constructor() {\r\n        this.projections = [];\r\n    }\r\n    project(alias: string, property: (x: T) => void) {\r\n        let p = property.toString().split('.');\r\n        var path;\r\n        for (var i = 1; i < p.length; i++) {\r\n            if (path === undefined) {\r\n                path = p[i];\r\n            } else {\r\n                path = path + \".\" + p[i];\r\n            }\r\n            \r\n        }\r\n        let binding = new Binding(alias,new Descriptor.MemberNode(path.split(';')[0]));\r\n        \r\n        this.projections.push(binding);\r\n    }\r\n\r\n    getProjection() {\r\n        return this.projections;\r\n    }\r\n}\r\n\r\n\r\nexport class Binding {\r\n    Key: string;\r\n    Value:Descriptor.INode;\r\n    constructor(key: string, value: Descriptor.INode) {\r\n        this.Key = key;\r\n        this.Value = value;\r\n    }\r\n    \r\n}\r\n\r\n\r\n    export class CQuery<T extends IFilterDescriptor> {\r\n        private WhereNode: Descriptor.CallNode;\r\n        private descriptor: Descriptor.CQueryDescriptor;\r\n        constructor(model: IModel,filters: T[],projections?:Binding[],includes?:string[]) {\r\n            this.descriptor = new Descriptor.CQueryDescriptor(model);\r\n            for (var i = 0; i < filters.length; i++) {\r\n                this.buildFilter(filters[i], \"\");\r\n            }\r\n\r\n            if(projections != null) {\r\n                this.buildProjection(projections);\r\n            }\r\n\r\n            if(includes.length > 0) {\r\n                this.buildIncludes(includes);\r\n            }\r\n            \r\n        }\r\n\r\n        private buildIncludes(includes:string[]) {\r\n            for (var i = 0; i < includes.length; i++) {\r\n                this.descriptor.IncludeParameters.push(new Descriptor.MemberNode(includes[i]));\r\n            }\r\n        }\r\n\r\n        private buildProjection(bindings: Binding[]) {\r\n            var node = new Descriptor.ProjectorNode();\r\n            node.Bindings = bindings;\r\n            node.Left = this.descriptor.Root;\r\n            this.descriptor.Root = node;\r\n            this.descriptor.QueryType = Descriptor.QueryType.AnonymeProjection;\r\n        }\r\n\r\n        getDescriptor(): Descriptor.CQueryDescriptor {\r\n            return this.descriptor;\r\n        }\r\n        private buildFilter(obj: IFilterDescriptor, path: string) {\r\n            let properties = Object.getOwnPropertyNames(obj);\r\n            for (let i = 0; i < properties.length; i++) {\r\n                let property = properties[i];\r\n                let value = obj[property];\r\n                let operator = <IOperator<any>>value;\r\n                let method = <IMethod<any>>value;\r\n                if (method.method != null) {\r\n                    this.addMethod(method.method);\r\n                    this.buildFilter(method.value.descriptor,\"\");\r\n                }\r\n                else if (operator.value == null) {\r\n                    let member = \"\";\r\n                    if (path !== \"\") {\r\n                        member = path + \".\" + property;\r\n                    } else {\r\n                        member = property;\r\n                    }\r\n                    this.buildFilter(value, member);\r\n                }\r\n                else if (operator.value instanceof Array){\r\n                    let member = \"\";\r\n                    if (path !== \"\") {\r\n                        member = path + \".\" + property;\r\n                    } else {\r\n                        member = property;\r\n                    }\r\n                    this.addMethodWhere(Descriptor.BinaryOperator.And, member, Descriptor.Methods.In, value.value);\r\n                }\r\n                else {\r\n                    let member = \"\";\r\n                    if (path !== \"\") {\r\n                        member = path + \".\" + property;\r\n                    } else {\r\n                        member = property;\r\n                    }\r\n                    if (Descriptor.CompareOperator[value.operator] !== undefined) {\r\n                        this.addBinaryWhere(Descriptor.BinaryOperator.And, member, value.operator, value.value);\r\n                    } else {\r\n                        this.addMethodWhere(Descriptor.BinaryOperator.And, member, value.operator, value.value);\r\n                    } \r\n                }\r\n\r\n                //let o = filter[properties[i]];\r\n                //let isMethod = (<IMethod<any>>o).method !== undefined;\r\n                //if ((<IOperator<any>>o).value !== undefined && (<IOperator<any>>o).operator !== undefined) {\r\n                //    let operator = (<IOperator<any>>o).operator;\r\n                //    let value = (<IOperator<any>>o).value;\r\n                //}\r\n                //let isInOperator = (<IInOperator<any>>o).value !== undefined;\r\n            }\r\n        }\r\n\r\n        \r\n\r\n        private addBinaryWhere(logicOp: Descriptor.BinaryOperator, member: string, compareOp: Descriptor.CompareOperator, value: any) {\r\n            let binaryNode = new Descriptor.BinaryNode(compareOp);\r\n            binaryNode.Left = new Descriptor.MemberNode(member);\r\n            binaryNode.Right = new Descriptor.ConstantNode(value);\r\n\r\n            if (this.WhereNode == null) {\r\n                this.WhereNode = new Descriptor.CallNode(\"Where\");\r\n                this.WhereNode.Right = binaryNode;\r\n                this.AppendNode(this.WhereNode);\r\n            } else {\r\n                let andNode = new Descriptor.BinaryNode(logicOp);\r\n                andNode.Left = this.WhereNode.Right as Descriptor.LNode;\r\n                andNode.Right = binaryNode;\r\n\r\n                this.WhereNode.Right = andNode;\r\n            }\r\n\r\n\r\n        }\r\n\r\n        private addMethod(method:Methods) {\r\n            if(method === Methods.Any) {\r\n\r\n            }\r\n        }\r\n        private addMethodWhere(logicOp: Descriptor.BinaryOperator, member: string, method: Descriptor.Methods | Descriptor.StringMethods, value: any) {\r\n            let methodName;\r\n            if (Descriptor.StringMethods[method] !== undefined) {\r\n                methodName = Descriptor.StringMethods[method].toString();\r\n            }\r\n            else if (Descriptor.Methods[method] !== undefined) {\r\n                methodName = Descriptor.Methods[method].toString();\r\n            } else {\r\n                alert(\"unbekannte method\" + method);\r\n            }\r\n            let callNode = new Descriptor.CallNode(methodName);\r\n            callNode.Left = new Descriptor.MemberNode(member);\r\n            callNode.Right = new Descriptor.ConstantNode(value);\r\n\r\n            if (this.WhereNode == null) {\r\n                let call = new Descriptor.CallNode(\"Where\");\r\n                call.Right = callNode;\r\n                this.AppendNode(call);\r\n            }\r\n            else {\r\n                let andNode = new Descriptor.BinaryNode(logicOp);\r\n                andNode.Left = this.WhereNode.Right as Descriptor.LNode;\r\n                andNode.Right = callNode;\r\n                this.WhereNode.Right = andNode;\r\n            }\r\n\r\n\r\n        }\r\n\r\n        private AppendNode(node: Descriptor.BNode) {\r\n            node.Left = this.descriptor.Root;\r\n            this.descriptor.Root = node;\r\n        }\r\n    }\r\n\r\n    export interface IFilter<T extends IModel> {\r\n        operator: Descriptor.CompareOperator | Descriptor.StringMethods;\r\n    }\r\n\r\n    export interface IFilterDescriptor {\r\n        \r\n    }\r\n\r\n    export interface IOperator<T> {\r\n        operator: Descriptor.CompareOperator | Descriptor.StringMethods;\r\n        value: T;\r\n    }\r\n\r\n    export interface IInOperator<T> {\r\n        value: T[];\r\n    }\r\n\r\n    export interface IMethod<T extends IFilterDescriptor> {\r\n        method: Descriptor.Methods;\r\n        value: T;\r\n    }\r\n\r\n\r\n\r\n\r\n"]}