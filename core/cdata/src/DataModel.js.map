{"version":3,"file":"DataModel.js","sourceRoot":"","sources":["DataModel.ts"],"names":[],"mappings":"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","sourcesContent":["import {RequestOptions, Headers, Http} from \"@angular/http\";\r\nimport {Observable} from \"rxjs\";\r\nrequire('rxjs/add/operator/map');\r\nimport {QNode, NodeType} from \"./QNode\";\r\nimport {BinaryType} from \"./QNode\";\r\nimport {MethodType} from \"./QNode\";\r\nimport {QDescriptor} from \"./QDescriptor\";\r\nimport {IProjection} from \"./IProjection\";\r\nimport {IModelEntity} from \"./IModelEntity\";\r\nimport {IDataModel} from \"./IDataModel\";\r\nimport {DataRow} from \"./DataRow\";\r\n\r\n\r\nexport abstract class DataModel<TP extends IProjection,TM extends IModelEntity> implements IDataModel<TM> {\r\n    private queryable: QNode;\r\n    private projection: QNode;\r\n    private filters: Array<QNode>;\r\n    private includes: string[];\r\n    private sortingNodes: Map<string,QNode>;\r\n\r\n    constructor(private http: Http, private url: string, modelEntry: IModelEntity) {\r\n        this.includes = [];\r\n        this.filters = [];\r\n        this.sortingNodes = new Map<string,QNode>();\r\n        this.queryable = {\r\n            Type: NodeType.Querable,\r\n            Value: modelEntry.constructor.name\r\n        };\r\n        this.projection = this.configureProjection();\r\n    }\r\n\r\n    abstract configureProjection(): QNode;\r\n\r\n    binding(p: ((x: TP)=> void), m: ((x: TM)=> void)): string {\r\n        let property = this.convertLambdaToPath(p);\r\n        let path = this.convertLambdaToPath(m);\r\n        return property + \":\" + path;\r\n    }\r\n\r\n    sort(property: string) : Observable<DataRow<TP>[]>{\r\n        let sort: QNode;\r\n        sort = {\r\n            Type: NodeType.Method,\r\n            Value: MethodType.OrderBy,\r\n            Right: {\r\n                Type: NodeType.Member,\r\n                Value: property\r\n            }\r\n        }\r\n        if (this.sortingNodes.has(property)) {\r\n            let node = this.sortingNodes.get(property);\r\n            if (node.Value == MethodType.OrderBy) {\r\n                node.Value = MethodType.OrderByDescending;\r\n            } else {\r\n                this.sortingNodes.delete(property);\r\n            }\r\n\r\n        }\r\n        else {\r\n            this.sortingNodes.set(property, sort);\r\n        }\r\n        return this.refresh();\r\n    }\r\n\r\n    addFilter(path: (x: TM) => any, op: BinaryType, value: any) {\r\n        let filter: QNode;\r\n        filter = {\r\n            Type: NodeType.Binary,\r\n            Value: op,\r\n            Left: {\r\n                Type: NodeType.Member,\r\n                Value: this.convertLambdaToPath(path)\r\n            },\r\n            Right: {\r\n                Type: NodeType.Constant,\r\n                Value: value\r\n            }\r\n        };\r\n        this.filters.push(filter);\r\n    }\r\n\r\n    private buildQuery(): QNode {\r\n        let root: QNode = null;\r\n        if (this.filters.length > 0) {\r\n            root = {\r\n                Type: NodeType.Method,\r\n                Value: MethodType.Where,\r\n                Left: this.queryable\r\n            };\r\n            for (var i = 0; i < this.filters.length; i++) {\r\n                let node = this.filters[i];\r\n                if (i == 0) {\r\n                    root.Right = node;\r\n                }\r\n                else {\r\n                    let binary: QNode = {\r\n                        Type: NodeType.Binary,\r\n                        Value: BinaryType.And,\r\n                        Left: root.Right,\r\n                        Right: node\r\n                    };\r\n                    root.Right = binary;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        if (root == null) {\r\n            this.projection.Left = this.queryable;\r\n        }\r\n        else {\r\n            this.projection.Left = root;\r\n        }\r\n        root = this.projection;\r\n\r\n\r\n        for (let node of this.sortingNodes.values()) {\r\n            node.Left = root;\r\n            root = node;\r\n        }\r\n        return root;\r\n    }\r\n\r\n    refresh() : Observable<DataRow<TP>[]>{\r\n        let root = this.buildQuery();\r\n        let descroiptor = new QDescriptor();\r\n        descroiptor.Root = root;\r\n        this.resetModel();\r\n        return this.post(descroiptor);\r\n\r\n\r\n    }\r\n\r\n    protected resetModel() {\r\n        this.includes = [];\r\n        this.filters = [];\r\n    }\r\n\r\n    private post(query: QDescriptor): Observable<DataRow<TP>[]> {\r\n        let body = JSON.stringify(query);\r\n        let headers = new Headers({'Content-Type': 'application/json'});\r\n        let options = new RequestOptions({headers: headers});\r\n        return this.http.post(this.url, body, options)\r\n            .map(res => <TP[]>res.json())\r\n            .map(res => {\r\n                let mapped:DataRow<TP>[] = [];\r\n                res.forEach(d => mapped.push(new DataRow<TP>(d)));\r\n                return mapped;\r\n\r\n            });\r\n    }\r\n\r\n    protected convertLambdaToPath(lambda: any): string {\r\n        let p = lambda.toString().split('.');\r\n        var path;\r\n        for (var i = 1; i < p.length; i++) {\r\n            if (path === undefined) {\r\n                path = p[i];\r\n            } else {\r\n                path = path + \".\" + p[i];\r\n            }\r\n\r\n        }\r\n        return path.split(';')[0];\r\n    }\r\n}\r\n\r\n\r\n"]}