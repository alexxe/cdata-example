{"version":3,"file":"DataModel.js","sourceRoot":"","sources":["DataModel.ts"],"names":[],"mappings":";AAAA,uBAA4C,eAAe,CAAC,CAAA;AAE5D,OAAO,CAAC,uBAAuB,CAAC,CAAC;AAMjC,wBAA8B,SAAS,CAAC,CAAA;AAGxC;IACI,YAAoB,IAAU,EAAS,GAAU,EAAS,KAAQ;QAA9C,SAAI,GAAJ,IAAI,CAAM;QAAS,QAAG,GAAH,GAAG,CAAO;QAAS,UAAK,GAAL,KAAK,CAAG;QAC9D,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;QAC5B,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,IAAI,CAAC,SAAS,GAAG;YACb,IAAI,EAAC,gBAAQ,CAAC,QAAQ;YACtB,KAAK,EAAC,KAAK,CAAC,WAAW,CAAC,IAAI;SAC/B,CAAC;IACN,CAAC;IAUD,OAAO;QACH,IAAI,KAAK,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QAChC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACpB,IAAI,CAAC,UAAU,EAAE,CAAC;IACtB,CAAC;IAES,UAAU;QAChB,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;QAC5B,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;IACvB,CAAC;IAES,UAAU,CAAC,CAAgB;QACjC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;IAC/D,CAAC;IAIO,OAAO,CAAC,KAAY;QACxB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,SAAS,CACtB,GAAG;YACC,IAAI,MAAM,GAAG,EAAE,CAAC;YAChB,GAAG,CAAC,OAAO,CAAC,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YACjC,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC;QACvB,CAAC,CAAC,CAAC;IACX,CAAC;IAEO,IAAI,CAAC,KAAY;QACrB,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QACjC,IAAI,OAAO,GAAG,IAAI,cAAO,CAAC,EAAC,cAAc,EAAE,kBAAkB,EAAC,CAAC,CAAC;QAChE,IAAI,OAAO,GAAG,IAAI,qBAAc,CAAC,EAAC,OAAO,EAAE,OAAO,EAAC,CAAC,CAAC;QACrD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,OAAO,CAAC;YAC9C,GAAG,CAAC,GAAG,IAAU,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;IACjC,CAAC;IAES,mBAAmB,CAAC,MAAU;QACpC,IAAI,CAAC,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACrC,IAAI,IAAI,CAAC;QACT,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YAChC,EAAE,CAAC,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC;gBACrB,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAChB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAC7B,CAAC;QAEL,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9B,CAAC;AACL,CAAC;AAjEqB,iBAAS,YAiE9B,CAAA","sourcesContent":["import {RequestOptions, Headers, Http} from \"@angular/http\";\r\nimport {Observable} from \"rxjs\";\r\nrequire('rxjs/add/operator/map');\r\nimport {IModel} from \"./IModel\";\r\nimport {CQueryDescriptor, CompareOperator, StringMethods} from \"./CQueryDescriptor\";\r\nimport {IFilterDescriptor, CQuery} from \"./CQuery\";\r\nimport {ViewModel} from \"./ViewModel\";\r\nimport {DescriptorVisitor} from \"./DescriptorVisitor\";\r\nimport {QNode, NodeType} from \"./QNode\";\r\n\r\n\r\nexport abstract class DataModel<TM extends IModel,TD extends IFilterDescriptor> {\r\n    constructor(private http: Http,private url:string,private model:TM) {\r\n        this.filterDescriptors = [];\r\n        this.includes = [];\r\n        this.queryable = {\r\n            Type:NodeType.Querable,\r\n            Value:model.constructor.name\r\n        };\r\n    }\r\n    protected queryable:QNode;\r\n    protected filterDescriptors: TD[];\r\n    private includes: string[];\r\n    public data:TM[];\r\n\r\n\r\n    abstract applyFilters() : QNode;\r\n\r\n\r\n    refresh() {\r\n        let query = this.applyFilters();\r\n        this.getData(query);\r\n        this.resetModel();\r\n    }\r\n\r\n    protected resetModel() {\r\n        this.filterDescriptors = [];\r\n        this.includes = [];\r\n    }\r\n\r\n    protected addInclude(f: (x:TM) => any) {\r\n        this.includes.push(this.convertLambdaToPath(f.toString()));\r\n    }\r\n\r\n\r\n\r\n    private getData(query: QNode) {\r\n        this.post(query).subscribe(\r\n            res => {\r\n                let mapped = [];\r\n                res.forEach(d => mapped.push(d));\r\n                this.data = mapped;\r\n            });\r\n    }\r\n\r\n    private post(query: QNode) : Observable<TM[]> {\r\n        let body = JSON.stringify(query);\r\n        let headers = new Headers({'Content-Type': 'application/json'});\r\n        let options = new RequestOptions({headers: headers});\r\n        return this.http.post(this.url, body, options).\r\n        map(res => <TM[]>res.json());\r\n    }\r\n\r\n    protected convertLambdaToPath(lambda:any) : string {\r\n        let p = lambda.toString().split('.');\r\n        var path;\r\n        for (var i = 1; i < p.length; i++) {\r\n            if (path === undefined) {\r\n                path = p[i];\r\n            } else {\r\n                path = path + \".\" + p[i];\r\n            }\r\n\r\n        }\r\n        return path.split(';')[0];\r\n    }\r\n}\r\n\r\n\r\n"]}