{"version":3,"file":"DataModel.js","sourceRoot":"","sources":["DataModel.ts"],"names":[],"mappings":"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","sourcesContent":["import {RequestOptions, Headers, Http} from \"@angular/http\";\nimport {Observable} from \"rxjs\";\nrequire('rxjs/add/operator/map');\nimport {QNode, NodeType} from \"./QNode\";\nimport {BinaryType} from \"./QNode\";\nimport {MethodType} from \"./QNode\";\nimport {QDescriptor} from \"./QDescriptor\";\nimport {Projection} from \"./Projection\";\nimport {IModelEntity} from \"./IModelEntity\";\nimport {IDataModel} from \"./IDataModel\";\nimport {DataRow} from \"./DataRow\";\n\n\nexport class DataModel<TP extends Projection,TM extends IModelEntity> implements IDataModel<TM>{\n    constructor(private http: Http,private url:string,modelEntry:IModelEntity) {\n        this.includes = [];\n        this.filters = [];\n        this.sorting = [];\n        this.queryable = {\n            Type:NodeType.Querable,\n            Value:modelEntry.constructor.name\n        };\n\n    }\n    private queryable:QNode;\n    protected projection:QNode;\n    private filters:Array<QNode>;\n    private includes: string[];\n    public data:TP[];\n    public sorting:string[];\n\n    binding(p:((x:TP)=> void),m:((x:TM)=> void)):string {\n        let property = this.convertLambdaToPath(p);\n        let path = this.convertLambdaToPath(m);\n        return property + \":\" + path;\n    }\n\n    addFilter(path: (x:TM) => any,op:BinaryType,value:any) {\n        let filter:QNode;\n        filter = {\n            Type:NodeType.Binary ,\n            Value: op,\n            Left:{\n                Type:NodeType.Member,\n                Value:this.convertLambdaToPath(path)\n            },\n            Right:{\n                Type:NodeType.Constant,\n                Value:value\n            }\n        };\n        this.filters.push(filter);\n    }\n\n    private buildQuery() :QNode {\n        if(this.filters.length == 0) {\n            this.projection.Left = this.queryable;\n            return this.projection;\n        }\n\n        let where:QNode = {\n            Type:NodeType.Method,\n            Value:MethodType.Where,\n            Left:this.queryable\n        };\n\n        for(var i = 0; i < this.filters.length; i++) {\n            let node = this.filters[i];\n            if(i == 0){\n                where.Right = node;\n            }\n            else {\n                let binary:QNode = {\n                    Type: NodeType.Binary,\n                    Value:BinaryType.And,\n                    Left:where.Right,\n                    Right:node\n                };\n                where.Right = binary;\n            }\n\n        }\n\n        this.projection.Left = where;\n        return this.projection;\n    }\n\n    refresh() {\n        let root = this.buildQuery();\n        let descroiptor = new QDescriptor();\n        descroiptor.Root = root;\n        this.getData(descroiptor);\n        this.resetModel();\n    }\n\n    protected resetModel() {\n        this.includes = [];\n        this.filters = [];\n    }\n\n    private getData(query: QDescriptor) {\n        this.post(query).subscribe(\n            res => {\n                let mapped = [];\n                res.forEach(d => mapped.push(new DataRow<TP>(d)));\n                if(this.sorting.length == 0){\n                    this.sorting = mapped[0].properties;\n                }\n                this.data = mapped;\n            });\n    }\n\n    private post(query: QDescriptor) : Observable<TP[]> {\n        let body = JSON.stringify(query);\n        let headers = new Headers({'Content-Type': 'application/json'});\n        let options = new RequestOptions({headers: headers});\n        return this.http.post(this.url, body, options).\n        map(res => <TP[]>res.json());\n    }\n\n    protected convertLambdaToPath(lambda:any) : string {\n        let p = lambda.toString().split('.');\n        var path;\n        for (var i = 1; i < p.length; i++) {\n            if (path === undefined) {\n                path = p[i];\n            } else {\n                path = path + \".\" + p[i];\n            }\n\n        }\n        return path.split(';')[0];\n    }\n}\n\n\n"]}