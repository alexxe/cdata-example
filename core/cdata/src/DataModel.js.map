{"version":3,"file":"DataModel.js","sourceRoot":"","sources":["DataModel.ts"],"names":[],"mappings":";AAAA,uBAA4C,eAAe,CAAC,CAAA;AAE5D,OAAO,CAAC,uBAAuB,CAAC,CAAC;AAMjC,wBAA8B,SAAS,CAAC,CAAA;AAGxC;IACI,YAAoB,IAAU,EAAS,GAAU,EAAS,KAAQ;QAA9C,SAAI,GAAJ,IAAI,CAAM;QAAS,QAAG,GAAH,GAAG,CAAO;QAAS,UAAK,GAAL,KAAK,CAAG;QAC9D,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;QAC5B,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,IAAI,CAAC,SAAS,GAAG;YACb,IAAI,EAAC,gBAAQ,CAAC,QAAQ;YACtB,KAAK,EAAC,KAAK,CAAC,WAAW,CAAC,IAAI;SAC/B,CAAC;IACN,CAAC;IAUD,OAAO;QACH,IAAI,KAAK,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QAChC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACpB,IAAI,CAAC,UAAU,EAAE,CAAC;IACtB,CAAC;IAES,UAAU;QAChB,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;QAC5B,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;IACvB,CAAC;IAES,UAAU,CAAC,CAAgB;QACjC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;IAC/D,CAAC;IAIO,OAAO,CAAC,KAAY;QACxB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,SAAS,CACtB,GAAG;YACC,IAAI,MAAM,GAAG,EAAE,CAAC;YAChB,GAAG,CAAC,OAAO,CAAC,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YACjC,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC;QACvB,CAAC,CAAC,CAAC;IACX,CAAC;IAEO,IAAI,CAAC,KAAY;QACrB,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QACjC,IAAI,OAAO,GAAG,IAAI,cAAO,CAAC,EAAC,cAAc,EAAE,kBAAkB,EAAC,CAAC,CAAC;QAChE,IAAI,OAAO,GAAG,IAAI,qBAAc,CAAC,EAAC,OAAO,EAAE,OAAO,EAAC,CAAC,CAAC;QACrD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,OAAO,CAAC;YAC9C,GAAG,CAAC,GAAG,IAAU,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;IACjC,CAAC;IAES,mBAAmB,CAAC,MAAU;QACpC,IAAI,CAAC,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACrC,IAAI,IAAI,CAAC;QACT,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YAChC,EAAE,CAAC,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC;gBACrB,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAChB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAC7B,CAAC;QAEL,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9B,CAAC;AACL,CAAC;AAjEqB,iBAAS,YAiE9B,CAAA","sourcesContent":["import {RequestOptions, Headers, Http} from \"@angular/http\";\nimport {Observable} from \"rxjs\";\nrequire('rxjs/add/operator/map');\nimport {IModel} from \"./IModel\";\nimport {CQueryDescriptor, CompareOperator, StringMethods} from \"./CQueryDescriptor\";\nimport {IFilterDescriptor, CQuery} from \"./CQuery\";\nimport {ViewModel} from \"./ViewModel\";\nimport {DescriptorVisitor} from \"./DescriptorVisitor\";\nimport {QNode, NodeType} from \"./QNode\";\n\n\nexport abstract class DataModel<TM extends IModel,TD extends IFilterDescriptor> {\n    constructor(private http: Http,private url:string,private model:TM) {\n        this.filterDescriptors = [];\n        this.includes = [];\n        this.queryable = {\n            Type:NodeType.Querable,\n            Value:model.constructor.name\n        };\n    }\n    protected queryable:QNode;\n    protected filterDescriptors: TD[];\n    private includes: string[];\n    public data:TM[];\n\n\n    abstract applyFilters() : QNode;\n\n\n    refresh() {\n        let query = this.applyFilters();\n        this.getData(query);\n        this.resetModel();\n    }\n\n    protected resetModel() {\n        this.filterDescriptors = [];\n        this.includes = [];\n    }\n\n    protected addInclude(f: (x:TM) => any) {\n        this.includes.push(this.convertLambdaToPath(f.toString()));\n    }\n\n\n\n    private getData(query: QNode) {\n        this.post(query).subscribe(\n            res => {\n                let mapped = [];\n                res.forEach(d => mapped.push(d));\n                this.data = mapped;\n            });\n    }\n\n    private post(query: QNode) : Observable<TM[]> {\n        let body = JSON.stringify(query);\n        let headers = new Headers({'Content-Type': 'application/json'});\n        let options = new RequestOptions({headers: headers});\n        return this.http.post(this.url, body, options).\n        map(res => <TM[]>res.json());\n    }\n\n    protected convertLambdaToPath(lambda:any) : string {\n        let p = lambda.toString().split('.');\n        var path;\n        for (var i = 1; i < p.length; i++) {\n            if (path === undefined) {\n                path = p[i];\n            } else {\n                path = path + \".\" + p[i];\n            }\n\n        }\n        return path.split(';')[0];\n    }\n}\n\n\n"]}