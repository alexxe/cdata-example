{"version":3,"file":"DataModel.js","sourceRoot":"","sources":["DataModel.ts"],"names":[],"mappings":"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","sourcesContent":["import {RequestOptions, Headers, Http} from \"@angular/http\";\r\nimport {Observable} from \"rxjs\";\r\nrequire('rxjs/add/operator/map');\r\nimport {QNode, NodeType} from \"./QNode\";\r\nimport {BinaryType} from \"./QNode\";\r\nimport {MethodType} from \"./QNode\";\r\nimport {QDescriptor} from \"./QDescriptor\";\r\nimport {Projection} from \"./Projection\";\r\nimport {IModelEntity} from \"./IModelEntity\";\r\nimport {IDataModel} from \"./IDataModel\";\r\nimport {DataRow} from \"./DataRow\";\r\n\r\n\r\nexport class DataModel<TP extends Projection,TM extends IModelEntity> implements IDataModel<TM>{\r\n    constructor(private http: Http,private url:string,modelEntry:IModelEntity) {\r\n        this.includes = [];\r\n        this.filters = [];\r\n        this.sorting = [];\r\n        this.queryable = {\r\n            Type:NodeType.Querable,\r\n            Value:modelEntry.constructor.name\r\n        };\r\n\r\n    }\r\n    private queryable:QNode;\r\n    protected projection:QNode;\r\n    private filters:Array<QNode>;\r\n    private includes: string[];\r\n    public data:TP[];\r\n    public sorting:string[];\r\n\r\n    binding(p:((x:TP)=> void),m:((x:TM)=> void)):string {\r\n        let property = this.convertLambdaToPath(p);\r\n        let path = this.convertLambdaToPath(m);\r\n        return property + \":\" + path;\r\n    }\r\n\r\n    addFilter(path: (x:TM) => any,op:BinaryType,value:any) {\r\n        let filter:QNode;\r\n        filter = {\r\n            Type:NodeType.Binary ,\r\n            Value: op,\r\n            Left:{\r\n                Type:NodeType.Member,\r\n                Value:this.convertLambdaToPath(path)\r\n            },\r\n            Right:{\r\n                Type:NodeType.Constant,\r\n                Value:value\r\n            }\r\n        };\r\n        this.filters.push(filter);\r\n    }\r\n\r\n    private buildQuery() :QNode {\r\n        if(this.filters.length == 0) {\r\n            this.projection.Left = this.queryable;\r\n            return this.projection;\r\n        }\r\n\r\n        let where:QNode = {\r\n            Type:NodeType.Method,\r\n            Value:MethodType.Where,\r\n            Left:this.queryable\r\n        };\r\n\r\n        for(var i = 0; i < this.filters.length; i++) {\r\n            let node = this.filters[i];\r\n            if(i == 0){\r\n                where.Right = node;\r\n            }\r\n            else {\r\n                let binary:QNode = {\r\n                    Type: NodeType.Binary,\r\n                    Value:BinaryType.And,\r\n                    Left:where.Right,\r\n                    Right:node\r\n                };\r\n                where.Right = binary;\r\n            }\r\n\r\n        }\r\n\r\n        this.projection.Left = where;\r\n        return this.projection;\r\n    }\r\n\r\n    refresh() {\r\n        let root = this.buildQuery();\r\n        let descroiptor = new QDescriptor();\r\n        descroiptor.Root = root;\r\n        this.getData(descroiptor);\r\n        this.resetModel();\r\n    }\r\n\r\n    protected resetModel() {\r\n        this.includes = [];\r\n        this.filters = [];\r\n    }\r\n\r\n    private getData(query: QDescriptor) {\r\n        this.post(query).subscribe(\r\n            res => {\r\n                let mapped = [];\r\n                res.forEach(d => mapped.push(new DataRow<TP>(d)));\r\n                if(this.sorting.length == 0){\r\n                    this.sorting = mapped[0].properties;\r\n                }\r\n                this.data = mapped;\r\n            });\r\n    }\r\n\r\n    private post(query: QDescriptor) : Observable<TP[]> {\r\n        let body = JSON.stringify(query);\r\n        let headers = new Headers({'Content-Type': 'application/json'});\r\n        let options = new RequestOptions({headers: headers});\r\n        return this.http.post(this.url, body, options).\r\n        map(res => <TP[]>res.json());\r\n    }\r\n\r\n    protected convertLambdaToPath(lambda:any) : string {\r\n        let p = lambda.toString().split('.');\r\n        var path;\r\n        for (var i = 1; i < p.length; i++) {\r\n            if (path === undefined) {\r\n                path = p[i];\r\n            } else {\r\n                path = path + \".\" + p[i];\r\n            }\r\n\r\n        }\r\n        return path.split(';')[0];\r\n    }\r\n}\r\n\r\n\r\n"]}