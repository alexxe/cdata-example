{"version":3,"file":"ViewModel.js","sourceRoot":"","sources":["ViewModel.ts"],"names":[],"mappings":";AAKA;IAKI,YAAsB,KAAoB;QAApB,UAAK,GAAL,KAAK,CAAe;QACtC,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACjB,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAClB,IAAI,CAAC,SAAS,GAAG,IAAI,GAAG,EAAmB,CAAC;QAC5C,IAAI,CAAC,aAAa,EAAE,CAAC;IACzB,CAAC;IAIO,gBAAgB;QACpB,IAAI,OAAO,GAAG,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACtD,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACtC,IAAI,QAAQ,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;YAC1B,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YAClC,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YACrC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAC,KAAK,CAAC,CAAC;QAC7B,CAAC;IACL,CAAC;IAED,mBAAmB,CAAC,QAAe;QAC/B,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED,oBAAoB,CAAC,QAAe;QAChC,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAED,IAAI,CAAC,QAAe;QAChB,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,SAAS,CAC/B,IAAI;YACA,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACrB,CAAC,CAAC,CAAC;IACX,CAAC;IAED,OAAO;QACH,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,SAAS,CAC1B,IAAI;YACA,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YACjB,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC3B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;YACtC,CAAC;QACL,CAAC,CAAC,CAAC;IACX,CAAC;AACL,CAAC;AAlDqB,iBAAS,YAkD9B,CAAA","sourcesContent":["import {IProjection} from \"./IProjection\";\r\nimport {IDataModel} from \"./IDataModel\";\r\nimport {IModelEntity} from \"./IModelEntity\";\r\nimport {DataRow} from \"./DataRow\";\r\n\r\nexport abstract class ViewModel<TP extends IProjection,TM extends IModelEntity>  {\r\n    filter: any;\r\n    filterMap:Map<string,Function>;\r\n    data:DataRow<TP>[];\r\n    sorting: string[];\r\n    constructor(protected model:IDataModel<TM>) {\r\n        this.filter = {};\r\n        this.sorting = [];\r\n        this.filterMap = new Map<string,Function>();\r\n        this.initFilterMap();\r\n    }\r\n    protected abstract initFilterMap();\r\n\r\n\r\n    private applyFilterState(){\r\n        let filters = Object.getOwnPropertyNames(this.filter);\r\n        for (let i = 0; i < filters.length; i++) {\r\n            let property = filters[i];\r\n            let value = this.filter[property];\r\n            let f = this.filterMap.get(property);\r\n            f.call(this.model,value);\r\n        }\r\n    }\r\n\r\n    isSortedByAscending(property:string) :boolean{\r\n        return true;\r\n    }\r\n\r\n    isSortedByDescending(property:string) :boolean{\r\n        return false;\r\n    }\r\n\r\n    sort(property:string){\r\n        this.applyFilterState();\r\n        this.model.sort(property).subscribe(\r\n            data => {\r\n                this.data = data;\r\n            });\r\n    }\r\n\r\n    refresh(){\r\n        this.applyFilterState();\r\n        this.model.refresh().subscribe(\r\n            data => {\r\n                this.data = data;\r\n                if (this.sorting.length == 0) {\r\n                    this.sorting = data[0].properties;\r\n                }\r\n            });\r\n    }\r\n}"]}