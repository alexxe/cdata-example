{"version":3,"file":"ViewModel.js","sourceRoot":"","sources":["ViewModel.ts"],"names":[],"mappings":";AAIA;IAGI,YAAsB,KAAsB;QAAtB,UAAK,GAAL,KAAK,CAAiB;QACxC,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACjB,IAAI,CAAC,SAAS,GAAG,IAAI,GAAG,EAAE,CAAC;IAC/B,CAAC;IAID,gBAAgB;QACZ,IAAI,OAAO,GAAG,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACtD,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACtC,IAAI,QAAQ,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;YAC1B,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YAClC,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAC,KAAK,CAAC,CAAC;QACnC,CAAC;IACL,CAAC;AAIL,CAAC;AArBqB,iBAAS,YAqB9B,CAAA","sourcesContent":["import {IFilterDescriptor} from \"./CQuery\";\nimport {DataModel} from \"./DataModel\";\nimport {IModel} from \"./IModel\";\n\nexport abstract class ViewModel<TM extends IModel,TD extends IFilterDescriptor>  {\n    filter: any;\n    filterMap:Map<string,Function>;\n    constructor(protected model:DataModel<TM,TD>) {\n        this.filter = {};\n        this.filterMap = new Map();\n    }\n\n    protected abstract addFilter(property:any,value:any);\n\n    applyFilterState(){\n        let filters = Object.getOwnPropertyNames(this.filter);\n        for (let i = 0; i < filters.length; i++) {\n            let property = filters[i];\n            let value = this.filter[property];\n            this.addFilter(property,value);\n        }\n    }\n\n\n\n}"]}