{"version":3,"file":"DataTable.js","sourceRoot":"","sources":["DataTable.ts"],"names":[],"mappings":"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","sourcesContent":["import {Directive, Input, EventEmitter, SimpleChange, OnChanges, DoCheck} from \"@angular/core\";\nimport * as _ from \"lodash\";\n\nexport interface SortEvent {\n    sortBy: string|string[];\n    sortOrder: string\n}\n\nexport interface PageEvent {\n    activePage: number;\n    rowsOnPage: number;\n    dataLength: number;\n}\n\nexport interface DataEvent {\n    length: number;\n}\n\n@Directive({\n    selector: 'table[mfData]',\n    exportAs: 'mfDataTable'\n})\nexport class DataTable<T> implements OnChanges, DoCheck {\n    constructor(){\n        this.data = [];\n    }\n    //@Input(\"mfData\") public inputData: any[] = [];\n    public inputData: any[] = [];\n\n    private sortBy: string|string[] = \"\";\n    private sortOrder = \"asc\";\n\n\n    //@Input(\"mfRowsOnPage\") public rowsOnPage = 1000;\n    //@Input(\"mfActivePage\") public activePage = 1;\n    public rowsOnPage = 1000;\n    public activePage = 1;\n\n    private mustRecalculateData = false;\n\n    public data: Array<T>;\n\n    public onDataChange = new EventEmitter<DataEvent>();\n    public onSortChange = new EventEmitter<SortEvent>();\n    public onPageChange = new EventEmitter<PageEvent>();\n\n    public getSort(): SortEvent {\n        return {sortBy: this.sortBy, sortOrder: this.sortOrder};\n    }\n\n    public setSort(sortBy: string|string[], sortOrder: string): void {\n        if (this.sortBy !== sortBy || this.sortOrder !== sortOrder) {\n            this.sortBy = sortBy;\n            this.sortOrder = sortOrder;\n            this.mustRecalculateData = true;\n            this.onSortChange.emit({sortBy: sortBy, sortOrder: sortOrder});\n        }\n    }\n\n    public getPage(): PageEvent {\n        return {activePage: this.activePage, rowsOnPage: this.rowsOnPage, dataLength: this.inputData.length};\n    }\n\n    public setPage(activePage: number, rowsOnPage: number): void {\n        if (this.rowsOnPage !== rowsOnPage || this.activePage !== activePage) {\n            this.activePage = this.activePage !== activePage ? activePage : this.calculateNewActivePage(this.rowsOnPage, rowsOnPage);\n            this.rowsOnPage = rowsOnPage;\n            this.mustRecalculateData = true;\n            this.onPageChange.emit({\n                activePage: this.activePage,\n                rowsOnPage: this.rowsOnPage,\n                dataLength: this.inputData.length\n            });\n        }\n    }\n\n    private calculateNewActivePage(previousRowsOnPage: number, currentRowsOnPage: number): number {\n        let firstRowOnPage = (this.activePage - 1) * previousRowsOnPage + 1;\n        let newActivePage = Math.ceil(firstRowOnPage / currentRowsOnPage);\n        return newActivePage;\n    }\n\n    private recalculatePage() {\n        let lastPage = Math.ceil(this.inputData.length / this.rowsOnPage);\n        this.activePage = lastPage < this.activePage ? lastPage : this.activePage;\n        this.activePage = this.activePage || 1;\n    }\n\n    public ngOnChanges(changes: {[key: string]: SimpleChange}): any {\n        if (changes[\"inputData\"]) {\n            this.inputData = changes[\"inputData\"].currentValue || [];\n            this.recalculatePage();\n            this.onPageChange.emit({\n                activePage: this.activePage,\n                rowsOnPage: this.rowsOnPage,\n                dataLength: this.inputData.length\n            });\n            this.mustRecalculateData = true;\n        }\n    }\n\n    public ngDoCheck(): any {\n        if (this.mustRecalculateData) {\n            this.fillData();\n            this.mustRecalculateData = false;\n        }\n    }\n\n    private fillData(): void {\n        this.activePage = this.activePage;\n        this.rowsOnPage = this.rowsOnPage;\n\n        let offset = (this.activePage - 1) * this.rowsOnPage;\n        let data = this.inputData;\n        var sortBy = this.sortBy;\n        if (typeof sortBy === 'string' || sortBy instanceof String) {\n            data = _.orderBy(data, this.caseInsensitiveIteratee(<string>sortBy), [this.sortOrder]);\n        } else {\n            data = _.orderBy(data, sortBy, [this.sortOrder]);\n        }\n        data = _.slice(data, offset, offset + this.rowsOnPage);\n        this.data = data;\n    }\n\n    private caseInsensitiveIteratee(sortBy: string) {\n        return (row: any): any => {\n            var value = row;\n            for (let sortByProperty of sortBy.split('.')){\n                value = value[sortByProperty];\n            }\n            if (value && typeof value === 'string' || value instanceof String) {\n                return value.toLowerCase();\n            }\n            return value;\n        };\n    }\n}"]}