{"version":3,"file":"Paginator.js","sourceRoot":"","sources":["Paginator.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,qBAAkE,eAAe,CAAC,CAAA;AAClF,0BAAmC,aAAa,CAAC,CAAA;AAMjD;IAYI,mBAAuC,aAA0B;QAZrE,iBAmCC;QAvB0C,kBAAa,GAAb,aAAa,CAAa;QAH1D,eAAU,GAAU,CAAC,CAAC;QAoBrB,2BAAsB,GAAG,UAAC,KAAe;YAC7C,KAAI,CAAC,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC;YACnC,KAAI,CAAC,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC;YACnC,KAAI,CAAC,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC;YACnC,KAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,KAAI,CAAC,UAAU,GAAG,KAAI,CAAC,UAAU,CAAC,CAAC;QACjE,CAAC,CAAC;IArBF,CAAC;IAEM,+BAAW,GAAlB,UAAmB,OAAmC;QAClD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,aAAa,CAAC;QACvD,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC;QACpD,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;IACrE,CAAC;IAEM,2BAAO,GAAd,UAAe,UAAiB;QAC5B,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;IACtD,CAAC;IAEM,iCAAa,GAApB,UAAqB,UAAiB;QAClC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;IACtD,CAAC;IAzBD;QAAC,YAAK,CAAC,SAAS,CAAC;;mDAAA;IANrB;QAAC,gBAAS,CAAC;YACP,QAAQ,EAAE,aAAa;YACvB,QAAQ,EAAE,2BAA2B;SACxC,CAAC;mBAasB,eAAQ,EAAE;;iBAbhC;IAoCF,gBAAC;AAAD,CAAC,AAnCD,IAmCC;AAnCY,iBAAS,YAmCrB,CAAA","sourcesContent":["import {Component, Input, SimpleChange, OnChanges, Optional} from \"@angular/core\";\r\nimport {DataTable, PageEvent} from \"./DataTable\";\r\n\r\n@Component({\r\n    selector: \"mfPaginator\",\r\n    template: `<ng-content></ng-content>`\r\n})\r\nexport class Paginator<T> implements OnChanges {\r\n\r\n    @Input(\"mfTable\")\r\n    private inputMfTable:DataTable<T>;\r\n\r\n    private mfTable:DataTable<T>;\r\n\r\n    public activePage:number;\r\n    public rowsOnPage:number;\r\n    public dataLength:number = 0;\r\n    public lastPage:number;\r\n\r\n    public constructor(@Optional() private injectMfTable:DataTable<T>) {\r\n    }\r\n\r\n    public ngOnChanges(changes:{[key:string]:SimpleChange}):any {\r\n        this.mfTable = this.inputMfTable || this.injectMfTable;\r\n        this.onPageChangeSubscriber(this.mfTable.getPage());\r\n        this.mfTable.onPageChange.subscribe(this.onPageChangeSubscriber);\r\n    }\r\n\r\n    public setPage(pageNumber:number):void {\r\n        this.mfTable.setPage(pageNumber, this.rowsOnPage);\r\n    }\r\n\r\n    public setRowsOnPage(rowsOnPage:number):void {\r\n        this.mfTable.setPage(this.activePage, rowsOnPage);\r\n    }\r\n\r\n    private onPageChangeSubscriber = (event:PageEvent)=> {\r\n        this.activePage = event.activePage;\r\n        this.rowsOnPage = event.rowsOnPage;\r\n        this.dataLength = event.dataLength;\r\n        this.lastPage = Math.ceil(this.dataLength / this.rowsOnPage);\r\n    };\r\n}"]}