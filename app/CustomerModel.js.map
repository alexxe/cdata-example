{"version":3,"file":"CustomerModel.js","sourceRoot":"","sources":["CustomerModel.ts"],"names":[],"mappings":"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","sourcesContent":["import {DataModel} from \"../core/cdata/src/DataModel\";\r\nimport {Http} from \"@angular/http\";\r\nimport {CustomerDto} from \"./model/CustomerDto\";\r\nimport {ICustomerDtoDescriptor} from \"./model/ICustomerDtoDescriptor\";\r\nimport {StringMethods, Methods} from \"../core/cdata/src/CQueryDescriptor\";\r\nimport {IContactDtoDescriptor} from \"./model/IContactDtoDescriptor\";\r\nimport {CustomerViewModel} from \"./CustomerViewModel\";\r\nimport {QNode, NodeType, MethodType, BinaryType} from \"../core/cdata/src/QNode\";\r\n\r\nexport class CustomerModel extends DataModel<CustomerDto,ICustomerDtoDescriptor>{\r\n    constructor(http: Http,url:string) {\r\n        super(http,url,new CustomerDto());\r\n        this.customerFilters = [];\r\n        this.contactFilters = [];\r\n    }\r\n\r\n    private customerFilters:Array<QNode>;\r\n    private contactFilters:Array<QNode>;\r\n\r\n    applyFilters() :QNode {\r\n        if(this.customerFilters.length == 0) {\r\n            return this.queryable;\r\n        }\r\n\r\n        let where:QNode = {\r\n            Type:NodeType.Method,\r\n            Value:MethodType.Where,\r\n            Left:this.queryable\r\n        };\r\n\r\n        for(var i = 0; i < this.customerFilters.length; i++) {\r\n            let node = this.customerFilters[i];\r\n            if(i == 0){\r\n                where.Right = node;\r\n            }\r\n            else {\r\n                let binary:QNode = {\r\n                    Type: NodeType.Binary,\r\n                    Value:BinaryType.And,\r\n                    Left:where.Right,\r\n                    Right:node\r\n                };\r\n                where.Right = binary;\r\n            }\r\n\r\n        }\r\n\r\n\r\n        return where;\r\n\r\n\r\n    }\r\n    customerSort(path: (x:ICustomerDtoDescriptor) => any) {\r\n\r\n    }\r\n\r\n    contactSort(path: (x:IContactDtoDescriptor) => any) {\r\n\r\n    }\r\n\r\n    addCustomerFilter(path: (x:ICustomerDtoDescriptor) => any,op:BinaryType,value:any) {\r\n        let filter:QNode;\r\n        filter = {\r\n            Type:NodeType.Binary ,\r\n            Value: op,\r\n            Left:{\r\n                Type:NodeType.Member,\r\n                Value:this.convertLambdaToPath(path)\r\n            },\r\n            Right:{\r\n                Type:NodeType.Constant,\r\n                Value:value\r\n            }\r\n        };\r\n        this.customerFilters.push(filter);\r\n    }\r\n\r\n    addContactFilter(path: (x:IContactDtoDescriptor) => any,op:BinaryType,value:any) {\r\n        let filter:QNode;\r\n        filter = {\r\n            Type:NodeType.Binary ,\r\n            Value: op,\r\n            Left:{\r\n                Type:NodeType.Member,\r\n                Value:this.convertLambdaToPath(path)\r\n            },\r\n            Right:{\r\n                Type:NodeType.Constant,\r\n                Value:value\r\n            }\r\n        };\r\n        this.contactFilters.push(filter);\r\n    }\r\n\r\n    protected resetModel() {\r\n        this.customerFilters = [];\r\n        this.contactFilters = [];\r\n        super.resetModel();\r\n    }\r\n\r\n}\r\n"]}