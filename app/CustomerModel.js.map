{"version":3,"file":"CustomerModel.js","sourceRoot":"","sources":["CustomerModel.ts"],"names":[],"mappings":"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","sourcesContent":["import {DataModel} from \"../core/cdata/src/DataModel\";\nimport {Http} from \"@angular/http\";\nimport {CustomerDto} from \"./model/CustomerDto\";\nimport {ICustomerDtoDescriptor} from \"./model/ICustomerDtoDescriptor\";\nimport {StringMethods, Methods} from \"../core/cdata/src/CQueryDescriptor\";\nimport {IContactDtoDescriptor} from \"./model/IContactDtoDescriptor\";\nimport {CustomerViewModel} from \"./CustomerViewModel\";\nimport {QNode, NodeType, MethodType, BinaryType} from \"../core/cdata/src/QNode\";\n\nexport class CustomerModel extends DataModel<CustomerDto,ICustomerDtoDescriptor>{\n    constructor(http: Http,url:string) {\n        super(http,url,new CustomerDto());\n        this.customerFilters = [];\n        this.contactFilters = [];\n    }\n\n    private customerFilters:Array<QNode>;\n    private contactFilters:Array<QNode>;\n\n    applyFilters() :QNode {\n        if(this.customerFilters.length == 0) {\n            return this.queryable;\n        }\n\n        let where:QNode = {\n            Type:NodeType.Method,\n            Value:MethodType.Where,\n            Left:this.queryable\n        };\n\n        for(var i = 0; i < this.customerFilters.length; i++) {\n            let node = this.customerFilters[i];\n            if(i == 0){\n                where.Right = node;\n            }\n            else {\n                let binary:QNode = {\n                    Type: NodeType.Binary,\n                    Value:BinaryType.And,\n                    Left:where.Right,\n                    Right:node\n                };\n                where.Right = binary;\n            }\n\n        }\n\n\n        return where;\n\n\n    }\n    customerSort(path: (x:ICustomerDtoDescriptor) => any) {\n\n    }\n\n    contactSort(path: (x:IContactDtoDescriptor) => any) {\n\n    }\n\n    addCustomerFilter(path: (x:ICustomerDtoDescriptor) => any,op:BinaryType,value:any) {\n        let filter:QNode;\n        filter = {\n            Type:NodeType.Binary ,\n            Value: op,\n            Left:{\n                Type:NodeType.Member,\n                Value:this.convertLambdaToPath(path)\n            },\n            Right:{\n                Type:NodeType.Constant,\n                Value:value\n            }\n        };\n        this.customerFilters.push(filter);\n    }\n\n    addContactFilter(path: (x:IContactDtoDescriptor) => any,op:BinaryType,value:any) {\n        let filter:QNode;\n        filter = {\n            Type:NodeType.Binary ,\n            Value: op,\n            Left:{\n                Type:NodeType.Member,\n                Value:this.convertLambdaToPath(path)\n            },\n            Right:{\n                Type:NodeType.Constant,\n                Value:value\n            }\n        };\n        this.contactFilters.push(filter);\n    }\n\n    protected resetModel() {\n        this.customerFilters = [];\n        this.contactFilters = [];\n        super.resetModel();\n    }\n\n}\n"]}