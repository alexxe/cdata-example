{"version":3,"file":"CustomerViewModel.js","sourceRoot":"","sources":["CustomerViewModel.ts"],"names":[],"mappings":";AAAA,4BAAwB,6BAA6B,CAAC,CAAA;AAEtD,wBAAyB,yBAAyB,CAAC,CAAA;AAInD,gCAAuC,qBAAS;IAC5C,YAAY,KAAmB;QAC3B,MAAM,KAAK,CAAC,CAAC;IAEjB,CAAC;IAED,aAAa;QACT,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,EAAC,CAAC,KAAS,KAAK,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,EAAC,kBAAU,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAC;QAC1G,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,EAAC,CAAC,KAAS,KAAK,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,EAAC,kBAAU,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAC;QAC3G,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,EAAC,CAAC,KAAS,KAAK,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAC,kBAAU,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAC;QAC5G,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,EAAC,CAAC,KAAS,KAAK,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAC,kBAAU,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAC;IACnH,CAAC;IAED,IAAI,CAAC,QAAe;QAChB,iDAAiD;QACjD,+BAA+B;QAC/B,iDAAiD;QACjD,IAAI;QACJ,+BAA+B;QAC/B,iDAAiD;QACjD,IAAI;QACJ,kCAAkC;QAClC,mDAAmD;QACnD,IAAI;QACJ,iCAAiC;QACjC,kDAAkD;QAClD,IAAI;IACR,CAAC;IAED,mBAAmB,CAAC,QAAe;QAC/B,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IACD,oBAAoB,CAAC,QAAe;QAChC,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;AAIL,CAAC;AAtCY,yBAAiB,oBAsC7B,CAAA","sourcesContent":["import {ViewModel} from \"../core/cdata/src/ViewModel\";\r\nimport {CustomerModel} from \"./CustomerModel\";\r\nimport {BinaryType} from \"../core/cdata/src/QNode\";\r\nimport {Projection} from \"../core/cdata/src/Projection\";\r\nimport {CustomerProjection} from \"./model/CustomerProjection\";\r\n\r\nexport class CustomerViewModel extends ViewModel<CustomerProjection> {\r\n    constructor(model:CustomerModel) {\r\n        super(model);\r\n\r\n    }\r\n\r\n    initFilterMap() {\r\n        this.filterMap.set(\"firma1\",(value:any) => this.model.addFilter(x => x.firma,BinaryType.Contains, value));\r\n        this.filterMap.set(\"firma2\",(value:any) => this.model.addFilter(x => x.firma1,BinaryType.Contains, value));\r\n        this.filterMap.set(\"firstName\",(value:any) => this.model.addFilter(x => x.name,BinaryType.Contains, value));\r\n        this.filterMap.set(\"lastName\",(value:any) => this.model.addFilter(x => x.nachname,BinaryType.Contains, value));\r\n    }\r\n\r\n    sort(property:string) {\r\n        // let customerModel = <CustomerModel>this.model;\r\n        // if (property === \"firma1\") {\r\n        //     customerModel.customerSort(x => x.firma1);\r\n        // }\r\n        // if (property === \"firma2\") {\r\n        //     customerModel.customerSort(x => x.firma2);\r\n        // }\r\n        // if (property === \"firstName\") {\r\n        //     customerModel.contactSort(x => x.firstName);\r\n        // }\r\n        // if (property === \"lastName\") {\r\n        //     customerModel.contactSort(x => x.lastName);\r\n        // }\r\n    }\r\n\r\n    isSortedByAscending(property:string) :boolean{\r\n        return true;\r\n    }\r\n    isSortedByDescending(property:string) :boolean{\r\n        return false;\r\n    }\r\n\r\n\r\n\r\n}\r\n"]}