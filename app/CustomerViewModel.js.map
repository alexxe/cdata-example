{"version":3,"file":"CustomerViewModel.js","sourceRoot":"","sources":["CustomerViewModel.ts"],"names":[],"mappings":";AAAA,4BAAwB,6BAA6B,CAAC,CAAA;AAQtD,wBAAsD,yBAAyB,CAAC,CAAA;AAEhF,gCAAuC,qBAAS;IAC5C,YAAY,KAAmB;QAC3B,MAAM,KAAK,CAAC,CAAC;QACb,IAAI,CAAC,GAAa,KAAK,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,EAAC,kBAAU,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;QAChF,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,EAAC,CAAC,CAAC,CAAC;IACnC,CAAC;IAGD,SAAS,CAAC,QAAe,EAAC,KAAS;QAC/B,IAAI,aAAa,GAAkB,IAAI,CAAC,KAAK,CAAC;QAC9C,EAAE,CAAC,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC;YACxB,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YACrC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACd,aAAa,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,EAAC,kBAAU,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QAC9E,CAAC;QAED,EAAE,CAAC,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC;YACxB,aAAa,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,EAAC,kBAAU,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QAC9E,CAAC;QAED,EAAE,CAAC,CAAC,QAAQ,KAAK,WAAW,CAAC,CAAC,CAAC;YAC3B,aAAa,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,CAAC,SAAS,EAAC,kBAAU,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QAChF,CAAC;QAED,EAAE,CAAC,CAAC,QAAQ,KAAK,UAAU,CAAC,CAAC,CAAC;YAC1B,aAAa,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAC,kBAAU,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QAC/E,CAAC;IACL,CAAC;IAED,IAAI,CAAC,QAAe;QAChB,IAAI,aAAa,GAAkB,IAAI,CAAC,KAAK,CAAC;QAC9C,EAAE,CAAC,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC;YACxB,aAAa,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC;QAC9C,CAAC;QACD,EAAE,CAAC,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC;YACxB,aAAa,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC;QAC9C,CAAC;QACD,EAAE,CAAC,CAAC,QAAQ,KAAK,WAAW,CAAC,CAAC,CAAC;YAC3B,aAAa,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,CAAC;QAChD,CAAC;QACD,EAAE,CAAC,CAAC,QAAQ,KAAK,UAAU,CAAC,CAAC,CAAC;YAC1B,aAAa,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,CAAC;QAC/C,CAAC;IACL,CAAC;IAED,mBAAmB,CAAC,QAAe;QAC/B,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IACD,oBAAoB,CAAC,QAAe;QAChC,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;AAIL,CAAC;AAtDY,yBAAiB,oBAsD7B,CAAA","sourcesContent":["import {ViewModel} from \"../core/cdata/src/ViewModel\";\nimport {ICustomerDtoDescriptor} from \"./model/ICustomerDtoDescriptor\";\nimport {Methods, StringMethods} from \"../core/cdata/src/CQueryDescriptor\";\nimport {IContactDtoDescriptor} from \"./model/IContactDtoDescriptor\";\nimport {CustomerDto} from \"./model/CustomerDto\";\nimport {CustomerModel} from \"./CustomerModel\";\nimport {IFilterDescriptor} from \"../core/cdata/src/CQuery\";\nimport {DescriptorVisitor} from \"../core/cdata/src/DescriptorVisitor\";\nimport {NodeType, QNode, MethodType, BinaryType} from \"../core/cdata/src/QNode\";\n\nexport class CustomerViewModel extends ViewModel<CustomerDto,ICustomerDtoDescriptor> {\n    constructor(model:CustomerModel) {\n        super(model);\n        let f :Function = model.addCustomerFilter(x => x.firma1,BinaryType.Contains, 0);\n        this.filterMap.set(\"firma1\",f);\n    }\n\n\n    addFilter(property:string,value:any) {\n        let customerModel = <CustomerModel>this.model;\n        if (property === \"firma1\") {\n            let f = this.filterMap.get(\"firma1\");\n            f.call(value);\n            customerModel.addCustomerFilter(x => x.firma1,BinaryType.Contains, value);\n        }\n\n        if (property === \"firma2\") {\n            customerModel.addCustomerFilter(x => x.firma2,BinaryType.Contains, value);\n        }\n\n        if (property === \"firstName\") {\n            customerModel.addContactFilter(x => x.firstName,BinaryType.Contains, value);\n        }\n\n        if (property === \"lastName\") {\n            customerModel.addContactFilter(x => x.lastName,BinaryType.Contains, value);\n        }\n    }\n\n    sort(property:string) {\n        let customerModel = <CustomerModel>this.model;\n        if (property === \"firma1\") {\n            customerModel.customerSort(x => x.firma1);\n        }\n        if (property === \"firma2\") {\n            customerModel.customerSort(x => x.firma2);\n        }\n        if (property === \"firstName\") {\n            customerModel.contactSort(x => x.firstName);\n        }\n        if (property === \"lastName\") {\n            customerModel.contactSort(x => x.lastName);\n        }\n    }\n\n    isSortedByAscending(property:string) :boolean{\n        return true;\n    }\n    isSortedByDescending(property:string) :boolean{\n        return false;\n    }\n\n\n\n}\n"]}