{"version":3,"file":"demo.component.js","sourceRoot":"","sources":["demo.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {Component, Input} from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport 'rxjs/add/observable/fromPromise';\r\nimport 'rxjs/add/operator/mergeMap';\r\nimport 'rxjs/add/operator/catch';\r\nimport 'rxjs/add/observable/throw';\r\nimport {Http, Headers, RequestOptions} from \"@angular/http\";\r\nimport {DataTable} from \"../core/table/src/DataTable\";\r\nimport {CustomerDto} from \"./model/CustomerDto\";\r\nimport {ICustomerDtoDescriptor} from \"./model/ICustomerDtoDescriptor\";\r\nimport {CompareOperator, StringMethods, Methods} from \"../core/cdata/src/CQueryDescriptor\";\r\nimport {IContactDtoDescriptor} from \"./model/IContactDtoDescriptor\";\r\nimport {CQuery} from \"../core/cdata/src/CQuery\";\r\n\r\n\r\n@Component({\r\n  selector: 'my-app',\r\n  templateUrl: './app/demo.component.html',\r\n  providers:[DataTable]\r\n\r\n})\r\nexport class DemoComponent {\r\n  private url:string = \"http://localhost/Example.WebApi/api/Model/Default\";\r\n  public dataTable: DataTable<CustomerDto>;\r\n\r\n  @Input()\r\n  get data() {\r\n    return this.dataTable.data;\r\n  }\r\n  constructor(private http: Http) {\r\n    this.dataTable = new DataTable<CustomerDto>();\r\n\r\n    /*http.get(\"app/data.json\")\r\n        .subscribe((data)=> {\r\n          setTimeout(()=> {\r\n\r\n            this.dataTable.data = data.json();\r\n          }, 1000);\r\n        });*/\r\n  }\r\n\r\n  private sortByWordLength = (a: any) => {\r\n    return a.name.length;\r\n  }\r\n\r\n  public removeItem(item: any) {\r\n    //this.data = _.filter(this.data, (elem)=>elem != item);\r\n    console.log(\"Remove: \", item.email);\r\n  }\r\n\r\n  public search() {\r\n    let viewFilter: any;\r\n    viewFilter = {};\r\n    viewFilter[\"firstName\"] = \"a\";\r\n    viewFilter[\"lastName\"] = \"l\";\r\n    viewFilter[\"firma1\"] = \"k\";\r\n\r\n    let filters = this.buildFilters(viewFilter);\r\n    let query = new CQuery<ICustomerDtoDescriptor>(new CustomerDto(), filters,null);\r\n\r\n    this.getData(query.getDescriptor()).subscribe(\r\n        data => {\r\n          this.dataTable.data = data;\r\n\r\n        }\r\n        ,\r\n        error => console.error(error));\r\n\r\n  }\r\n\r\n  private buildQuery() {\r\n\r\n\r\n  }\r\n\r\n  private buildFilters(viewFilter: any): ICustomerDtoDescriptor[] {\r\n    let customerFilter: ICustomerDtoDescriptor[] = [];\r\n    let contactFilter: IContactDtoDescriptor[] = [];\r\n\r\n    let contactFilters = Object.getOwnPropertyNames(viewFilter);\r\n    for (let i = 0; i < contactFilters.length; i++) {\r\n      let property = contactFilters[i];\r\n      let value = viewFilter[property];\r\n      if (property === \"firstName\") {\r\n        contactFilter.push({\r\n          firstName: {\r\n            operator: StringMethods.Contains,\r\n            value: value\r\n          }\r\n        });\r\n      } else if (property === \"lastName\") {\r\n        contactFilter.push({\r\n          lastName: {\r\n            operator: StringMethods.Contains,\r\n            value: value\r\n          }\r\n        });\r\n\r\n      }\r\n    }\r\n\r\n    let customerFilters = Object.getOwnPropertyNames(viewFilter);\r\n    for (let i = 0; i < customerFilters.length; i++) {\r\n      let property = customerFilters[i];\r\n      let value = viewFilter[property];\r\n      if (property === \"firma1\") {\r\n        customerFilter.push({\r\n          firma1: {\r\n            operator: StringMethods.Contains,\r\n            value: value\r\n          }\r\n        });\r\n      } else if (property === \"firma2\") {\r\n        customerFilter.push({\r\n          firma2: {\r\n            operator: StringMethods.Contains,\r\n            value: value\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    if (contactFilters.length > 0) {\r\n      customerFilter.push({\r\n          contacts: {\r\n            method: Methods.Any,\r\n            value:contactFilter\r\n          }\r\n        });\r\n    }\r\n\r\n\r\n    return customerFilter;\r\n  }\r\n\r\n  getData(query: any): Observable<any> {\r\n    let body = JSON.stringify(query);\r\n    let headers = new Headers({'Content-Type': 'application/json'});\r\n    let options = new RequestOptions({headers: headers});\r\n    let post = this.http.post(this.url, body, options);\r\n    let result = post.mergeMap((res) => this.dataTable.data = res.json());\r\n    return result;\r\n  }\r\n}\r\n"]}